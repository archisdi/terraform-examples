**There are 3 types of IaC tools**

Configuration Management
    are designed to install and manage software,
    maintaining standard structures,
    version controlled,and are idempotent.
    Examples:
        - Ansible
        - Puppet
        - Salt Stack

Server Templating
    Pre-installed software and dependencies,
    for creating virtual machines or containers,
    are immutable infrastrucfure.
    Examples:
        - Docker
        - Packer
        - Vagrant

Provisioning Tools
    Deploy immutable infrasctructure resources,
    such as servers, databases, network components, etc,
    it has multiple providers.
    Examples:
        - Terraform
        - CloudFormation

**General Notes**
- terraform uses HCL, hashicorp configuration language to define the infrastructure resources as block of codes.
- the configuration file uses .tf
- terraform store the state of real life infrastructure as .tfstate
- by default terraform install the latest version of the providers
- a file can contains multiple providers, and every time a new provider is used, it has to be initialize with terraform init
- variable can be read from system env by adding "TF_VAR_" prefix
- a resource will be marked as tainted if it is modified after it is created or if it fails to be created

**3 Tiers of Providers**
- Official
- Partner
- Community

**Terraform State**
- every time terraform apply is executed, it will create a state file with .tfstate extension
- the state file will store the last condition of the infrasctructure to be compared in later operation
- we can make terraform to refer to the state file alone without it refreshing state every time with -refresh=false flag
- state can also be stored on remote storage such as amazon s3, allows the engineer to collaborate with a fault-tolerant manner
- terraform state contains sensitive information, it is not recommended to store it on version control system
- terrafirm will lock the state file when it is being used, to prevent multiple users from modifying the state file at the same time
- state locking can only be done on remote storage
- remote storage also provide a secure way to store the state file, and it can be encrypted

**Terraform Commands**
- terraform init        ->  initialize the project
- terraform plan        ->  show the changes to be applied to the infrastructure
- terraform apply       ->  apply the changes to the infrastructure
- terraform show        ->  print the current state of the resources
- terraform validate    ->  validate the syntax of the configuration files
- terraform fmt         ->  format the configuration files into canonical format
- terraform providers   ->  list all the providers used in the project
- terraform output      ->  show the output of the resources
- terraform refresh     ->  refresh the state of the resources if it is not up to date
- terraform graph       ->  show the graph of the resources in DOT format
- terraform destroy     ->  destroy the resources created by terraform

**Mutable vs Immutable Infrastructure**
- mutable infrastructure is the traditional way of managing infrastructure, where the resources are updated in place
- immutable infrastructure is the modern way of managing infrastructure, where the resources are replaced with new resources every time a change is made

**Data Sources**
- data sources are used to fetch information from the infrastructure, such as AMIs, VPCs, subnets, etc and are read only
- data sources are defined using the data block

**Meta-Arguments**
- is used to define the behavior of the resources
- common Meta-Arguments such as depends_on, count, for_each, provider, lifecycle, etc

**Terraform State Commands**
- terraform state list  ->  list all the resources in the state file
- terraform state show  ->  show the details of a specific resource in the state file
- terraform state mv    ->  move a resource to a new address in the state file
- terraform state pull  ->  pull the state file from the remote storage
- terraform state push  ->  push the state file to the remote storage

**Terraform Provisioners**
- provisioners are used to execute scripts on the resources after they are created
- provisioners are defined using the provisioner block
- there are 3 types of provisioners, local-exec, remote-exec, and file
- it is not recommended to use provisioners, as they are not idempotent
- it is recommended to use configuration management tools such as Ansible, Puppet, or Chef
- when a provisioner fails, terraform will not rollback the changes and 

** Taint and Import Commands**
- terraform taint       ->  mark a resource as tainted
- terraform untaint     ->  remove the tainted mark from a resource
- terraform import      ->  import an existing resource to the state file

**Debugging Terraform**
- to enable debug mode, set TF_LOG=DEBUG, it will show the debug logs when terraform is executed
- there are 5 levels of logging, TRACE, DEBUG, INFO, WARN, ERROR
- to store logs in a file, set TF_LOG_PATH=/path/to/file.log

**Terraform Modules**
- modules are used to organize the configuration files into reusable components
- modules are defined using the module block
- modules can be stored locally or remotely

**Terraform Functions**
- functions are used to manipulate the data in the configuration files
- type of functions such as string, list, map, file, etc

**Terraform Logical Operators**
- logical operators are used to combine multiple conditions in the configuration files
- type of logical operators such as and, or, not

**Terraform Workspace**
- to create a new workspace, use terraform workspace new <name> command